// Generated by @wagmi/cli@0.1.10 on 2/21/2023 at 10:41:42â€¯PM
import {
  useContract,
  UseContractConfig,
  useContractRead,
  UseContractReadConfig,
  useContractWrite,
  UseContractWriteConfig,
  usePrepareContractWrite,
  UsePrepareContractWriteConfig,
  useContractEvent,
  UseContractEventConfig,
} from "wagmi";
import {
  ReadContractResult,
  WriteContractMode,
  PrepareWriteContractResult,
} from "wagmi/actions";

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// ERC20
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const erc20ABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "nonces",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" },
      { name: "deadline", internalType: "uint256", type: "uint256" },
      { name: "v", internalType: "uint8", type: "uint8" },
      { name: "r", internalType: "bytes32", type: "bytes32" },
      { name: "s", internalType: "bytes32", type: "bytes32" },
    ],
    name: "permit",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// IMulticall3
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const iMulticall3ABI = [
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      {
        name: "calls",
        internalType: "struct IMulticall3.Call[]",
        type: "tuple[]",
        components: [
          { name: "target", internalType: "address", type: "address" },
          { name: "callData", internalType: "bytes", type: "bytes" },
        ],
      },
    ],
    name: "aggregate",
    outputs: [
      { name: "blockNumber", internalType: "uint256", type: "uint256" },
      { name: "returnData", internalType: "bytes[]", type: "bytes[]" },
    ],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      {
        name: "calls",
        internalType: "struct IMulticall3.Call3[]",
        type: "tuple[]",
        components: [
          { name: "target", internalType: "address", type: "address" },
          { name: "allowFailure", internalType: "bool", type: "bool" },
          { name: "callData", internalType: "bytes", type: "bytes" },
        ],
      },
    ],
    name: "aggregate3",
    outputs: [
      {
        name: "returnData",
        internalType: "struct IMulticall3.Result[]",
        type: "tuple[]",
        components: [
          { name: "success", internalType: "bool", type: "bool" },
          { name: "returnData", internalType: "bytes", type: "bytes" },
        ],
      },
    ],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      {
        name: "calls",
        internalType: "struct IMulticall3.Call3Value[]",
        type: "tuple[]",
        components: [
          { name: "target", internalType: "address", type: "address" },
          { name: "allowFailure", internalType: "bool", type: "bool" },
          { name: "value", internalType: "uint256", type: "uint256" },
          { name: "callData", internalType: "bytes", type: "bytes" },
        ],
      },
    ],
    name: "aggregate3Value",
    outputs: [
      {
        name: "returnData",
        internalType: "struct IMulticall3.Result[]",
        type: "tuple[]",
        components: [
          { name: "success", internalType: "bool", type: "bool" },
          { name: "returnData", internalType: "bytes", type: "bytes" },
        ],
      },
    ],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      {
        name: "calls",
        internalType: "struct IMulticall3.Call[]",
        type: "tuple[]",
        components: [
          { name: "target", internalType: "address", type: "address" },
          { name: "callData", internalType: "bytes", type: "bytes" },
        ],
      },
    ],
    name: "blockAndAggregate",
    outputs: [
      { name: "blockNumber", internalType: "uint256", type: "uint256" },
      { name: "blockHash", internalType: "bytes32", type: "bytes32" },
      {
        name: "returnData",
        internalType: "struct IMulticall3.Result[]",
        type: "tuple[]",
        components: [
          { name: "success", internalType: "bool", type: "bool" },
          { name: "returnData", internalType: "bytes", type: "bytes" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getBasefee",
    outputs: [{ name: "basefee", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "blockNumber", internalType: "uint256", type: "uint256" }],
    name: "getBlockHash",
    outputs: [{ name: "blockHash", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getBlockNumber",
    outputs: [
      { name: "blockNumber", internalType: "uint256", type: "uint256" },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getChainId",
    outputs: [{ name: "chainid", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getCurrentBlockCoinbase",
    outputs: [{ name: "coinbase", internalType: "address", type: "address" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getCurrentBlockDifficulty",
    outputs: [{ name: "difficulty", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getCurrentBlockGasLimit",
    outputs: [{ name: "gaslimit", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getCurrentBlockTimestamp",
    outputs: [{ name: "timestamp", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "addr", internalType: "address", type: "address" }],
    name: "getEthBalance",
    outputs: [{ name: "balance", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "getLastBlockHash",
    outputs: [{ name: "blockHash", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "requireSuccess", internalType: "bool", type: "bool" },
      {
        name: "calls",
        internalType: "struct IMulticall3.Call[]",
        type: "tuple[]",
        components: [
          { name: "target", internalType: "address", type: "address" },
          { name: "callData", internalType: "bytes", type: "bytes" },
        ],
      },
    ],
    name: "tryAggregate",
    outputs: [
      {
        name: "returnData",
        internalType: "struct IMulticall3.Result[]",
        type: "tuple[]",
        components: [
          { name: "success", internalType: "bool", type: "bool" },
          { name: "returnData", internalType: "bytes", type: "bytes" },
        ],
      },
    ],
  },
  {
    stateMutability: "payable",
    type: "function",
    inputs: [
      { name: "requireSuccess", internalType: "bool", type: "bool" },
      {
        name: "calls",
        internalType: "struct IMulticall3.Call[]",
        type: "tuple[]",
        components: [
          { name: "target", internalType: "address", type: "address" },
          { name: "callData", internalType: "bytes", type: "bytes" },
        ],
      },
    ],
    name: "tryBlockAndAggregate",
    outputs: [
      { name: "blockNumber", internalType: "uint256", type: "uint256" },
      { name: "blockHash", internalType: "bytes32", type: "bytes32" },
      {
        name: "returnData",
        internalType: "struct IMulticall3.Result[]",
        type: "tuple[]",
        components: [
          { name: "success", internalType: "bool", type: "bool" },
          { name: "returnData", internalType: "bytes", type: "bytes" },
        ],
      },
    ],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// StdInvariant
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const stdInvariantABI = [
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "excludeArtifacts",
    outputs: [
      {
        name: "excludedArtifacts_",
        internalType: "string[]",
        type: "string[]",
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "excludeContracts",
    outputs: [
      {
        name: "excludedContracts_",
        internalType: "address[]",
        type: "address[]",
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "excludeSenders",
    outputs: [
      {
        name: "excludedSenders_",
        internalType: "address[]",
        type: "address[]",
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "targetArtifactSelectors",
    outputs: [
      {
        name: "targetedArtifactSelectors_",
        internalType: "struct StdInvariant.FuzzSelector[]",
        type: "tuple[]",
        components: [
          { name: "addr", internalType: "address", type: "address" },
          { name: "selectors", internalType: "bytes4[]", type: "bytes4[]" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "targetArtifacts",
    outputs: [
      {
        name: "targetedArtifacts_",
        internalType: "string[]",
        type: "string[]",
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "targetContracts",
    outputs: [
      {
        name: "targetedContracts_",
        internalType: "address[]",
        type: "address[]",
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "targetSelectors",
    outputs: [
      {
        name: "targetedSelectors_",
        internalType: "struct StdInvariant.FuzzSelector[]",
        type: "tuple[]",
        components: [
          { name: "addr", internalType: "address", type: "address" },
          { name: "selectors", internalType: "bytes4[]", type: "bytes4[]" },
        ],
      },
    ],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "targetSenders",
    outputs: [
      {
        name: "targetedSenders_",
        internalType: "address[]",
        type: "address[]",
      },
    ],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// Token
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export const tokenABI = [
  {
    type: "event",
    anonymous: false,
    inputs: [
      {
        name: "owner",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "spender",
        internalType: "address",
        type: "address",
        indexed: true,
      },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Approval",
  },
  {
    type: "event",
    anonymous: false,
    inputs: [
      { name: "from", internalType: "address", type: "address", indexed: true },
      { name: "to", internalType: "address", type: "address", indexed: true },
      {
        name: "amount",
        internalType: "uint256",
        type: "uint256",
        indexed: false,
      },
    ],
    name: "Transfer",
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "DOMAIN_SEPARATOR",
    outputs: [{ name: "", internalType: "bytes32", type: "bytes32" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [
      { name: "", internalType: "address", type: "address" },
      { name: "", internalType: "address", type: "address" },
    ],
    name: "allowance",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "spender", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "approve",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "balanceOf",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "decimals",
    outputs: [{ name: "", internalType: "uint8", type: "uint8" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "name",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [{ name: "", internalType: "address", type: "address" }],
    name: "nonces",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "owner", internalType: "address", type: "address" },
      { name: "spender", internalType: "address", type: "address" },
      { name: "value", internalType: "uint256", type: "uint256" },
      { name: "deadline", internalType: "uint256", type: "uint256" },
      { name: "v", internalType: "uint8", type: "uint8" },
      { name: "r", internalType: "bytes32", type: "bytes32" },
      { name: "s", internalType: "bytes32", type: "bytes32" },
    ],
    name: "permit",
    outputs: [],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "symbol",
    outputs: [{ name: "", internalType: "string", type: "string" }],
  },
  {
    stateMutability: "view",
    type: "function",
    inputs: [],
    name: "totalSupply",
    outputs: [{ name: "", internalType: "uint256", type: "uint256" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transfer",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
  {
    stateMutability: "nonpayable",
    type: "function",
    inputs: [
      { name: "from", internalType: "address", type: "address" },
      { name: "to", internalType: "address", type: "address" },
      { name: "amount", internalType: "uint256", type: "uint256" },
    ],
    name: "transferFrom",
    outputs: [{ name: "", internalType: "bool", type: "bool" }],
  },
] as const;

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// React
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20(config: Omit<UseContractConfig, "abi"> = {} as any) {
  return useContract({ abi: erc20ABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof erc20ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any
) {
  return useContractRead({ abi: erc20ABI, ...config } as UseContractReadConfig<
    typeof erc20ABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useErc20DomainSeparator<
  TSelectData = ReadContractResult<typeof erc20ABI, "DOMAIN_SEPARATOR">
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, "DOMAIN_SEPARATOR", TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: "DOMAIN_SEPARATOR",
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, "DOMAIN_SEPARATOR", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"allowance"`.
 */
export function useErc20Allowance<
  TSelectData = ReadContractResult<typeof erc20ABI, "allowance">
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, "allowance", TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: "allowance",
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, "allowance", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useErc20BalanceOf<
  TSelectData = ReadContractResult<typeof erc20ABI, "balanceOf">
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, "balanceOf", TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, "balanceOf", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"decimals"`.
 */
export function useErc20Decimals<
  TSelectData = ReadContractResult<typeof erc20ABI, "decimals">
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, "decimals", TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: "decimals",
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, "decimals", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"name"`.
 */
export function useErc20Name<
  TSelectData = ReadContractResult<typeof erc20ABI, "name">
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, "name", TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, "name", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"nonces"`.
 */
export function useErc20Nonces<
  TSelectData = ReadContractResult<typeof erc20ABI, "nonces">
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, "nonces", TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: "nonces",
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, "nonces", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"symbol"`.
 */
export function useErc20Symbol<
  TSelectData = ReadContractResult<typeof erc20ABI, "symbol">
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, "symbol", TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, "symbol", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useErc20TotalSupply<
  TSelectData = ReadContractResult<typeof erc20ABI, "totalSupply">
>(
  config: Omit<
    UseContractReadConfig<typeof erc20ABI, "totalSupply", TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: erc20ABI,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof erc20ABI, "totalSupply", TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Write<
  TMode extends WriteContractMode,
  TFunctionName extends string
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof erc20ABI, TFunctionName> & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20ABI, TFunctionName>({
    abi: erc20ABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function useErc20Approve<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, "approve">["abi"],
        "approve"
      > & { functionName?: "approve" }
    : UseContractWriteConfig<TMode, typeof erc20ABI, "approve"> & {
        abi?: never;
        functionName?: "approve";
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20ABI, "approve">({
    abi: erc20ABI,
    functionName: "approve",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"permit"`.
 */
export function useErc20Permit<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, "permit">["abi"],
        "permit"
      > & { functionName?: "permit" }
    : UseContractWriteConfig<TMode, typeof erc20ABI, "permit"> & {
        abi?: never;
        functionName?: "permit";
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20ABI, "permit">({
    abi: erc20ABI,
    functionName: "permit",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function useErc20Transfer<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, "transfer">["abi"],
        "transfer"
      > & { functionName?: "transfer" }
    : UseContractWriteConfig<TMode, typeof erc20ABI, "transfer"> & {
        abi?: never;
        functionName?: "transfer";
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20ABI, "transfer">({
    abi: erc20ABI,
    functionName: "transfer",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useErc20TransferFrom<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof erc20ABI, "transferFrom">["abi"],
        "transferFrom"
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<TMode, typeof erc20ABI, "transferFrom"> & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any
) {
  return useContractWrite<TMode, typeof erc20ABI, "transferFrom">({
    abi: erc20ABI,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__.
 */
export function usePrepareErc20Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>,
    "abi"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareErc20Approve(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, "approve">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, "approve">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareErc20Permit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, "permit">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: "permit",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, "permit">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareErc20Transfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, "transfer">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: "transfer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, "transfer">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link erc20ABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareErc20TransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof erc20ABI, "transferFrom">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: erc20ABI,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof erc20ABI, "transferFrom">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__.
 */
export function useErc20Event<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, TEventName>,
    "abi"
  > = {} as any
) {
  return useContractEvent({
    abi: erc20ABI,
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Approval"`.
 */
export function useErc20ApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, "Approval">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link erc20ABI}__ and `eventName` set to `"Transfer"`.
 */
export function useErc20TransferEvent(
  config: Omit<
    UseContractEventConfig<typeof erc20ABI, "Transfer">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: erc20ABI,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof erc20ABI, "Transfer">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function useIMulticall3(
  config: Omit<UseContractConfig, "abi"> = {} as any
) {
  return useContract({ abi: iMulticall3ABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function useIMulticall3Read<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof iMulticall3ABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any
) {
  return useContractRead({
    abi: iMulticall3ABI,
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getBasefee"`.
 */
export function useIMulticall3GetBasefee<
  TSelectData = ReadContractResult<typeof iMulticall3ABI, "getBasefee">
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, "getBasefee", TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: "getBasefee",
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, "getBasefee", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getBlockHash"`.
 */
export function useIMulticall3GetBlockHash<
  TSelectData = ReadContractResult<typeof iMulticall3ABI, "getBlockHash">
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, "getBlockHash", TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: "getBlockHash",
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, "getBlockHash", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getBlockNumber"`.
 */
export function useIMulticall3GetBlockNumber<
  TSelectData = ReadContractResult<typeof iMulticall3ABI, "getBlockNumber">
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, "getBlockNumber", TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: "getBlockNumber",
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, "getBlockNumber", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getChainId"`.
 */
export function useIMulticall3GetChainId<
  TSelectData = ReadContractResult<typeof iMulticall3ABI, "getChainId">
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, "getChainId", TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: "getChainId",
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, "getChainId", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockCoinbase"`.
 */
export function useIMulticall3GetCurrentBlockCoinbase<
  TSelectData = ReadContractResult<
    typeof iMulticall3ABI,
    "getCurrentBlockCoinbase"
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof iMulticall3ABI,
      "getCurrentBlockCoinbase",
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: "getCurrentBlockCoinbase",
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, "getCurrentBlockCoinbase", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockDifficulty"`.
 */
export function useIMulticall3GetCurrentBlockDifficulty<
  TSelectData = ReadContractResult<
    typeof iMulticall3ABI,
    "getCurrentBlockDifficulty"
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof iMulticall3ABI,
      "getCurrentBlockDifficulty",
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: "getCurrentBlockDifficulty",
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, "getCurrentBlockDifficulty", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockGasLimit"`.
 */
export function useIMulticall3GetCurrentBlockGasLimit<
  TSelectData = ReadContractResult<
    typeof iMulticall3ABI,
    "getCurrentBlockGasLimit"
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof iMulticall3ABI,
      "getCurrentBlockGasLimit",
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: "getCurrentBlockGasLimit",
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, "getCurrentBlockGasLimit", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getCurrentBlockTimestamp"`.
 */
export function useIMulticall3GetCurrentBlockTimestamp<
  TSelectData = ReadContractResult<
    typeof iMulticall3ABI,
    "getCurrentBlockTimestamp"
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof iMulticall3ABI,
      "getCurrentBlockTimestamp",
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: "getCurrentBlockTimestamp",
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, "getCurrentBlockTimestamp", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getEthBalance"`.
 */
export function useIMulticall3GetEthBalance<
  TSelectData = ReadContractResult<typeof iMulticall3ABI, "getEthBalance">
>(
  config: Omit<
    UseContractReadConfig<typeof iMulticall3ABI, "getEthBalance", TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: "getEthBalance",
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, "getEthBalance", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"getLastBlockHash"`.
 */
export function useIMulticall3GetLastBlockHash<
  TSelectData = ReadContractResult<typeof iMulticall3ABI, "getLastBlockHash">
>(
  config: Omit<
    UseContractReadConfig<
      typeof iMulticall3ABI,
      "getLastBlockHash",
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: iMulticall3ABI,
    functionName: "getLastBlockHash",
    ...config,
  } as UseContractReadConfig<typeof iMulticall3ABI, "getLastBlockHash", TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function useIMulticall3Write<
  TMode extends WriteContractMode,
  TFunctionName extends string
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iMulticall3ABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof iMulticall3ABI, TFunctionName> & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<TMode, typeof iMulticall3ABI, TFunctionName>({
    abi: iMulticall3ABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate"`.
 */
export function useIMulticall3Aggregate<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iMulticall3ABI, "aggregate">["abi"],
        "aggregate"
      > & { functionName?: "aggregate" }
    : UseContractWriteConfig<TMode, typeof iMulticall3ABI, "aggregate"> & {
        abi?: never;
        functionName?: "aggregate";
      } = {} as any
) {
  return useContractWrite<TMode, typeof iMulticall3ABI, "aggregate">({
    abi: iMulticall3ABI,
    functionName: "aggregate",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3"`.
 */
export function useIMulticall3Aggregate3<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof iMulticall3ABI, "aggregate3">["abi"],
        "aggregate3"
      > & { functionName?: "aggregate3" }
    : UseContractWriteConfig<TMode, typeof iMulticall3ABI, "aggregate3"> & {
        abi?: never;
        functionName?: "aggregate3";
      } = {} as any
) {
  return useContractWrite<TMode, typeof iMulticall3ABI, "aggregate3">({
    abi: iMulticall3ABI,
    functionName: "aggregate3",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3Value"`.
 */
export function useIMulticall3Aggregate3Value<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          "aggregate3Value"
        >["abi"],
        "aggregate3Value"
      > & { functionName?: "aggregate3Value" }
    : UseContractWriteConfig<
        TMode,
        typeof iMulticall3ABI,
        "aggregate3Value"
      > & {
        abi?: never;
        functionName?: "aggregate3Value";
      } = {} as any
) {
  return useContractWrite<TMode, typeof iMulticall3ABI, "aggregate3Value">({
    abi: iMulticall3ABI,
    functionName: "aggregate3Value",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"blockAndAggregate"`.
 */
export function useIMulticall3BlockAndAggregate<
  TMode extends WriteContractMode
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          "blockAndAggregate"
        >["abi"],
        "blockAndAggregate"
      > & { functionName?: "blockAndAggregate" }
    : UseContractWriteConfig<
        TMode,
        typeof iMulticall3ABI,
        "blockAndAggregate"
      > & {
        abi?: never;
        functionName?: "blockAndAggregate";
      } = {} as any
) {
  return useContractWrite<TMode, typeof iMulticall3ABI, "blockAndAggregate">({
    abi: iMulticall3ABI,
    functionName: "blockAndAggregate",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryAggregate"`.
 */
export function useIMulticall3TryAggregate<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          "tryAggregate"
        >["abi"],
        "tryAggregate"
      > & { functionName?: "tryAggregate" }
    : UseContractWriteConfig<TMode, typeof iMulticall3ABI, "tryAggregate"> & {
        abi?: never;
        functionName?: "tryAggregate";
      } = {} as any
) {
  return useContractWrite<TMode, typeof iMulticall3ABI, "tryAggregate">({
    abi: iMulticall3ABI,
    functionName: "tryAggregate",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryBlockAndAggregate"`.
 */
export function useIMulticall3TryBlockAndAggregate<
  TMode extends WriteContractMode
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<
          typeof iMulticall3ABI,
          "tryBlockAndAggregate"
        >["abi"],
        "tryBlockAndAggregate"
      > & { functionName?: "tryBlockAndAggregate" }
    : UseContractWriteConfig<
        TMode,
        typeof iMulticall3ABI,
        "tryBlockAndAggregate"
      > & {
        abi?: never;
        functionName?: "tryBlockAndAggregate";
      } = {} as any
) {
  return useContractWrite<TMode, typeof iMulticall3ABI, "tryBlockAndAggregate">(
    {
      abi: iMulticall3ABI,
      functionName: "tryBlockAndAggregate",
      ...config,
    } as any
  );
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__.
 */
export function usePrepareIMulticall3Write<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, TFunctionName>,
    "abi"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate"`.
 */
export function usePrepareIMulticall3Aggregate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, "aggregate">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: "aggregate",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, "aggregate">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3"`.
 */
export function usePrepareIMulticall3Aggregate3(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, "aggregate3">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: "aggregate3",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, "aggregate3">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"aggregate3Value"`.
 */
export function usePrepareIMulticall3Aggregate3Value(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, "aggregate3Value">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: "aggregate3Value",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, "aggregate3Value">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"blockAndAggregate"`.
 */
export function usePrepareIMulticall3BlockAndAggregate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, "blockAndAggregate">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: "blockAndAggregate",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, "blockAndAggregate">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryAggregate"`.
 */
export function usePrepareIMulticall3TryAggregate(
  config: Omit<
    UsePrepareContractWriteConfig<typeof iMulticall3ABI, "tryAggregate">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: "tryAggregate",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, "tryAggregate">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link iMulticall3ABI}__ and `functionName` set to `"tryBlockAndAggregate"`.
 */
export function usePrepareIMulticall3TryBlockAndAggregate(
  config: Omit<
    UsePrepareContractWriteConfig<
      typeof iMulticall3ABI,
      "tryBlockAndAggregate"
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: iMulticall3ABI,
    functionName: "tryBlockAndAggregate",
    ...config,
  } as UsePrepareContractWriteConfig<typeof iMulticall3ABI, "tryBlockAndAggregate">);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link stdInvariantABI}__.
 */
export function useStdInvariant(
  config: Omit<UseContractConfig, "abi"> = {} as any
) {
  return useContract({ abi: stdInvariantABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__.
 */
export function useStdInvariantRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof stdInvariantABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any
) {
  return useContractRead({
    abi: stdInvariantABI,
    ...config,
  } as UseContractReadConfig<typeof stdInvariantABI, TFunctionName, TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"excludeArtifacts"`.
 */
export function useStdInvariantExcludeArtifacts<
  TSelectData = ReadContractResult<typeof stdInvariantABI, "excludeArtifacts">
>(
  config: Omit<
    UseContractReadConfig<
      typeof stdInvariantABI,
      "excludeArtifacts",
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: "excludeArtifacts",
    ...config,
  } as UseContractReadConfig<typeof stdInvariantABI, "excludeArtifacts", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"excludeContracts"`.
 */
export function useStdInvariantExcludeContracts<
  TSelectData = ReadContractResult<typeof stdInvariantABI, "excludeContracts">
>(
  config: Omit<
    UseContractReadConfig<
      typeof stdInvariantABI,
      "excludeContracts",
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: "excludeContracts",
    ...config,
  } as UseContractReadConfig<typeof stdInvariantABI, "excludeContracts", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"excludeSenders"`.
 */
export function useStdInvariantExcludeSenders<
  TSelectData = ReadContractResult<typeof stdInvariantABI, "excludeSenders">
>(
  config: Omit<
    UseContractReadConfig<
      typeof stdInvariantABI,
      "excludeSenders",
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: "excludeSenders",
    ...config,
  } as UseContractReadConfig<typeof stdInvariantABI, "excludeSenders", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"targetArtifactSelectors"`.
 */
export function useStdInvariantTargetArtifactSelectors<
  TSelectData = ReadContractResult<
    typeof stdInvariantABI,
    "targetArtifactSelectors"
  >
>(
  config: Omit<
    UseContractReadConfig<
      typeof stdInvariantABI,
      "targetArtifactSelectors",
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: "targetArtifactSelectors",
    ...config,
  } as UseContractReadConfig<typeof stdInvariantABI, "targetArtifactSelectors", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"targetArtifacts"`.
 */
export function useStdInvariantTargetArtifacts<
  TSelectData = ReadContractResult<typeof stdInvariantABI, "targetArtifacts">
>(
  config: Omit<
    UseContractReadConfig<
      typeof stdInvariantABI,
      "targetArtifacts",
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: "targetArtifacts",
    ...config,
  } as UseContractReadConfig<typeof stdInvariantABI, "targetArtifacts", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"targetContracts"`.
 */
export function useStdInvariantTargetContracts<
  TSelectData = ReadContractResult<typeof stdInvariantABI, "targetContracts">
>(
  config: Omit<
    UseContractReadConfig<
      typeof stdInvariantABI,
      "targetContracts",
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: "targetContracts",
    ...config,
  } as UseContractReadConfig<typeof stdInvariantABI, "targetContracts", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"targetSelectors"`.
 */
export function useStdInvariantTargetSelectors<
  TSelectData = ReadContractResult<typeof stdInvariantABI, "targetSelectors">
>(
  config: Omit<
    UseContractReadConfig<
      typeof stdInvariantABI,
      "targetSelectors",
      TSelectData
    >,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: "targetSelectors",
    ...config,
  } as UseContractReadConfig<typeof stdInvariantABI, "targetSelectors", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link stdInvariantABI}__ and `functionName` set to `"targetSenders"`.
 */
export function useStdInvariantTargetSenders<
  TSelectData = ReadContractResult<typeof stdInvariantABI, "targetSenders">
>(
  config: Omit<
    UseContractReadConfig<typeof stdInvariantABI, "targetSenders", TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: stdInvariantABI,
    functionName: "targetSenders",
    ...config,
  } as UseContractReadConfig<typeof stdInvariantABI, "targetSenders", TSelectData>);
}

/**
 * Wraps __{@link useContract}__ with `abi` set to __{@link tokenABI}__.
 */
export function useToken(config: Omit<UseContractConfig, "abi"> = {} as any) {
  return useContract({ abi: tokenABI, ...config });
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenABI}__.
 */
export function useTokenRead<
  TFunctionName extends string,
  TSelectData = ReadContractResult<typeof tokenABI, TFunctionName>
>(
  config: Omit<
    UseContractReadConfig<typeof tokenABI, TFunctionName, TSelectData>,
    "abi"
  > = {} as any
) {
  return useContractRead({ abi: tokenABI, ...config } as UseContractReadConfig<
    typeof tokenABI,
    TFunctionName,
    TSelectData
  >);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenABI}__ and `functionName` set to `"DOMAIN_SEPARATOR"`.
 */
export function useTokenDomainSeparator<
  TSelectData = ReadContractResult<typeof tokenABI, "DOMAIN_SEPARATOR">
>(
  config: Omit<
    UseContractReadConfig<typeof tokenABI, "DOMAIN_SEPARATOR", TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: tokenABI,
    functionName: "DOMAIN_SEPARATOR",
    ...config,
  } as UseContractReadConfig<typeof tokenABI, "DOMAIN_SEPARATOR", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenABI}__ and `functionName` set to `"allowance"`.
 */
export function useTokenAllowance<
  TSelectData = ReadContractResult<typeof tokenABI, "allowance">
>(
  config: Omit<
    UseContractReadConfig<typeof tokenABI, "allowance", TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: tokenABI,
    functionName: "allowance",
    ...config,
  } as UseContractReadConfig<typeof tokenABI, "allowance", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenABI}__ and `functionName` set to `"balanceOf"`.
 */
export function useTokenBalanceOf<
  TSelectData = ReadContractResult<typeof tokenABI, "balanceOf">
>(
  config: Omit<
    UseContractReadConfig<typeof tokenABI, "balanceOf", TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: tokenABI,
    functionName: "balanceOf",
    ...config,
  } as UseContractReadConfig<typeof tokenABI, "balanceOf", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenABI}__ and `functionName` set to `"decimals"`.
 */
export function useTokenDecimals<
  TSelectData = ReadContractResult<typeof tokenABI, "decimals">
>(
  config: Omit<
    UseContractReadConfig<typeof tokenABI, "decimals", TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: tokenABI,
    functionName: "decimals",
    ...config,
  } as UseContractReadConfig<typeof tokenABI, "decimals", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenABI}__ and `functionName` set to `"name"`.
 */
export function useTokenName<
  TSelectData = ReadContractResult<typeof tokenABI, "name">
>(
  config: Omit<
    UseContractReadConfig<typeof tokenABI, "name", TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: tokenABI,
    functionName: "name",
    ...config,
  } as UseContractReadConfig<typeof tokenABI, "name", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenABI}__ and `functionName` set to `"nonces"`.
 */
export function useTokenNonces<
  TSelectData = ReadContractResult<typeof tokenABI, "nonces">
>(
  config: Omit<
    UseContractReadConfig<typeof tokenABI, "nonces", TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: tokenABI,
    functionName: "nonces",
    ...config,
  } as UseContractReadConfig<typeof tokenABI, "nonces", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenABI}__ and `functionName` set to `"symbol"`.
 */
export function useTokenSymbol<
  TSelectData = ReadContractResult<typeof tokenABI, "symbol">
>(
  config: Omit<
    UseContractReadConfig<typeof tokenABI, "symbol", TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: tokenABI,
    functionName: "symbol",
    ...config,
  } as UseContractReadConfig<typeof tokenABI, "symbol", TSelectData>);
}

/**
 * Wraps __{@link useContractRead}__ with `abi` set to __{@link tokenABI}__ and `functionName` set to `"totalSupply"`.
 */
export function useTokenTotalSupply<
  TSelectData = ReadContractResult<typeof tokenABI, "totalSupply">
>(
  config: Omit<
    UseContractReadConfig<typeof tokenABI, "totalSupply", TSelectData>,
    "abi" | "functionName"
  > = {} as any
) {
  return useContractRead({
    abi: tokenABI,
    functionName: "totalSupply",
    ...config,
  } as UseContractReadConfig<typeof tokenABI, "totalSupply", TSelectData>);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tokenABI}__.
 */
export function useTokenWrite<
  TMode extends WriteContractMode,
  TFunctionName extends string
>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof tokenABI, string>["abi"],
        TFunctionName
      >
    : UseContractWriteConfig<TMode, typeof tokenABI, TFunctionName> & {
        abi?: never;
      } = {} as any
) {
  return useContractWrite<TMode, typeof tokenABI, TFunctionName>({
    abi: tokenABI,
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tokenABI}__ and `functionName` set to `"approve"`.
 */
export function useTokenApprove<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof tokenABI, "approve">["abi"],
        "approve"
      > & { functionName?: "approve" }
    : UseContractWriteConfig<TMode, typeof tokenABI, "approve"> & {
        abi?: never;
        functionName?: "approve";
      } = {} as any
) {
  return useContractWrite<TMode, typeof tokenABI, "approve">({
    abi: tokenABI,
    functionName: "approve",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tokenABI}__ and `functionName` set to `"permit"`.
 */
export function useTokenPermit<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof tokenABI, "permit">["abi"],
        "permit"
      > & { functionName?: "permit" }
    : UseContractWriteConfig<TMode, typeof tokenABI, "permit"> & {
        abi?: never;
        functionName?: "permit";
      } = {} as any
) {
  return useContractWrite<TMode, typeof tokenABI, "permit">({
    abi: tokenABI,
    functionName: "permit",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tokenABI}__ and `functionName` set to `"transfer"`.
 */
export function useTokenTransfer<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof tokenABI, "transfer">["abi"],
        "transfer"
      > & { functionName?: "transfer" }
    : UseContractWriteConfig<TMode, typeof tokenABI, "transfer"> & {
        abi?: never;
        functionName?: "transfer";
      } = {} as any
) {
  return useContractWrite<TMode, typeof tokenABI, "transfer">({
    abi: tokenABI,
    functionName: "transfer",
    ...config,
  } as any);
}

/**
 * Wraps __{@link useContractWrite}__ with `abi` set to __{@link tokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function useTokenTransferFrom<TMode extends WriteContractMode>(
  config: TMode extends "prepared"
    ? UseContractWriteConfig<
        TMode,
        PrepareWriteContractResult<typeof tokenABI, "transferFrom">["abi"],
        "transferFrom"
      > & { functionName?: "transferFrom" }
    : UseContractWriteConfig<TMode, typeof tokenABI, "transferFrom"> & {
        abi?: never;
        functionName?: "transferFrom";
      } = {} as any
) {
  return useContractWrite<TMode, typeof tokenABI, "transferFrom">({
    abi: tokenABI,
    functionName: "transferFrom",
    ...config,
  } as any);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tokenABI}__.
 */
export function usePrepareTokenWrite<TFunctionName extends string>(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tokenABI, TFunctionName>,
    "abi"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: tokenABI,
    ...config,
  } as UsePrepareContractWriteConfig<typeof tokenABI, TFunctionName>);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tokenABI}__ and `functionName` set to `"approve"`.
 */
export function usePrepareTokenApprove(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tokenABI, "approve">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: tokenABI,
    functionName: "approve",
    ...config,
  } as UsePrepareContractWriteConfig<typeof tokenABI, "approve">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tokenABI}__ and `functionName` set to `"permit"`.
 */
export function usePrepareTokenPermit(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tokenABI, "permit">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: tokenABI,
    functionName: "permit",
    ...config,
  } as UsePrepareContractWriteConfig<typeof tokenABI, "permit">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tokenABI}__ and `functionName` set to `"transfer"`.
 */
export function usePrepareTokenTransfer(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tokenABI, "transfer">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: tokenABI,
    functionName: "transfer",
    ...config,
  } as UsePrepareContractWriteConfig<typeof tokenABI, "transfer">);
}

/**
 * Wraps __{@link usePrepareContractWrite}__ with `abi` set to __{@link tokenABI}__ and `functionName` set to `"transferFrom"`.
 */
export function usePrepareTokenTransferFrom(
  config: Omit<
    UsePrepareContractWriteConfig<typeof tokenABI, "transferFrom">,
    "abi" | "functionName"
  > = {} as any
) {
  return usePrepareContractWrite({
    abi: tokenABI,
    functionName: "transferFrom",
    ...config,
  } as UsePrepareContractWriteConfig<typeof tokenABI, "transferFrom">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tokenABI}__.
 */
export function useTokenEvent<TEventName extends string>(
  config: Omit<
    UseContractEventConfig<typeof tokenABI, TEventName>,
    "abi"
  > = {} as any
) {
  return useContractEvent({
    abi: tokenABI,
    ...config,
  } as UseContractEventConfig<typeof tokenABI, TEventName>);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tokenABI}__ and `eventName` set to `"Approval"`.
 */
export function useTokenApprovalEvent(
  config: Omit<
    UseContractEventConfig<typeof tokenABI, "Approval">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: tokenABI,
    eventName: "Approval",
    ...config,
  } as UseContractEventConfig<typeof tokenABI, "Approval">);
}

/**
 * Wraps __{@link useContractEvent}__ with `abi` set to __{@link tokenABI}__ and `eventName` set to `"Transfer"`.
 */
export function useTokenTransferEvent(
  config: Omit<
    UseContractEventConfig<typeof tokenABI, "Transfer">,
    "abi" | "eventName"
  > = {} as any
) {
  return useContractEvent({
    abi: tokenABI,
    eventName: "Transfer",
    ...config,
  } as UseContractEventConfig<typeof tokenABI, "Transfer">);
}
